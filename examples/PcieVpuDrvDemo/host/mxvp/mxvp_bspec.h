/*******************************************************************************
 *
 * Intel Myriad-X Vision Processor Driver: PCIe VPU protocol general API
 *
 * Copyright (C) 2018 Intel Corporation
 *
 * SPDX-License-Identifier: GPL-2.0-only
 *
 ******************************************************************************/

#ifndef MXVP_BSPEC_HEADER_
#define MXVP_BSPEC_HEADER_

#include "mxvp.h"
#include "mxvp_cmd.h"
#include "mxvp_async.h"

/*
 * @brief Requested callback of submitted command
 *
 * NOTES:
 *  1) If command has been freed by user since submission of command,
 *     command is invalid in this context
 *  2) reply is automatically freed after callback completes, user may not
 *     reference pointer after callback and should copy reply contents during
 *     callback as needed
 *  3) user is responsible for managing resources passed in through arg
 *
 * @param[in] mxvp  - pointer to mxvp object
 * @param[in] cmd   - pointer to command supplied by caller
 * @param[in] reply - reply generated by VPU
 * @param[in] arg   - pointer to user supplied context argument at send time
 */
typedef void (*mxvp_command_cb)(struct mxvp_cmd *command,
                                const struct mxvp_reply *reply, void *arg);

/*
 * @brief Initialize mxvp device instance
 *
 * @param[in] mxvp - pointer to mxvp object
 *
 * @return:
 *       0 - success
 *      <0 - linux error code
 */
int  mxvp_bspec_init(struct mxvp *mxvp);

/*
 * @brief Cleanup of mxvp device instance
 *
 * @param[in] mxvp - pointer to mxvp object
 */
void mxvp_bspec_cleanup(struct mxvp *mxvp);

/*
 * @brief Enqueues command into command queue
 *
 * NOTES:
 *  1) Thread-safe
 *  2) Only valid for MXVP_CMD_EXE_BUFFER, MXVP_CMD_FENCE
 *  3) Processing of submission requires doorbell event
 *
 * @param[in] mxvp - pointer to mxvp object
 * @param[in] cmd  - pointer to command to copy into queue
 * @param[in] cb   - optional user supplied callback
 * @param[in] arg  - optional user supplied argument in callback
 *
 * @return:
 *   0 - success
 *  <0 - linux error code
 */
int  mxvp_send_cmd(struct mxvp *mxvp, struct mxvp_cmd *cmd,
                    mxvp_command_cb cb, void *arg);

/*
 * @brief Enqueues command into DMA queue
 *
 * NOTES:
 *  1) Thread-safe
 *  2) Only valid for MXVP_CMD_DMA_READ, MXVP_CMD_DMA_WRITE,
 *                    MXVP_CMD_MULTI_DMA_READ, MXVP_CMD_MULTI_DMA_WRITE,
 *                    MXVP_CMD_MEM_FILL,
 *                    MXVP_CMD_FENCE
 *  3) Processing of submission requires doorbell event
 *
 * @param[in] mxvp - pointer to mxvp object
 * @param[in] cmd  - pointer to command to copy into queue
 * @param[in] cb   - optional user supplied callback
 * @param[in] arg  - optional user supplied argument in callback
 *
 * @return:
 *       0 - success
 *      <0 - linux error code
 */
int  mxvp_send_dma(struct mxvp *mxvp, struct mxvp_cmd *cmd,
                    mxvp_command_cb cb, void *arg);

/*
 * @brief Sends async command
 *
 * NOTES:
 *  1) Thread-safe
 *  2) Only valid for mxvp_async_cmd types
 *  3) Doorbell event is handled in function
 *
 * @param[in] mxvp - pointer to mxvp object
 * @param[in] cmd  - async command to send
 * @param[in] arg  - associated async argument
 *
 * @return:
 *       0 - success
 *      <0 - linux error code
 */
int  mxvp_send_async(struct mxvp *mxvp, enum mxvp_async_cmd cmd, void *arg);

/*
 * @brief Generates doorbell event
 *
 * NOTES:
 *  1) Thread-safe
 *  2) Required to process queue entries
 *
 * @param[in] mxvp - pointer to mxvp object
 *
 * @return:
 *       0 - success
 *      <0 - linux error code
 */
int  mxvp_ring_doorbell(struct mxvp *mxvp);

/*
 * @brief Reads VPU temperature reported through MMIO
 *
 * NOTES:
 *  1) Thread-safe
 *
 * @param[in] mxvp - pointer to mxvp object
 *
 * @return:
 *       temperature in degrees Celsius
 */
s16  mxvp_read_temperature(struct mxvp *mxvp);

#endif
